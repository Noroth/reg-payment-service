// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package interaction

import (
	"context"
	"github.com/eurofurence/reg-payment-service/internal/entities"
	"github.com/eurofurence/reg-payment-service/internal/repository/database"
	"sync"
)

// Ensure, that RepositoryMock does implement database.Repository.
// If this is not the case, regenerate this file with moq.
var _ database.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of database.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked database.Repository
//		mockedRepository := &RepositoryMock{
//			CreateTransactionFunc: func(ctx context.Context, tr entities.Transaction) error {
//				panic("mock out the CreateTransaction method")
//			},
//			CreateTransactionLogFunc: func(ctx context.Context, h entities.TransactionLog) error {
//				panic("mock out the CreateTransactionLog method")
//			},
//			DeleteTransactionFunc: func(ctx context.Context, tr entities.Transaction) error {
//				panic("mock out the DeleteTransaction method")
//			},
//			GetAdminTransactionsByFilterFunc: func(ctx context.Context, query entities.TransactionQuery) ([]entities.Transaction, error) {
//				panic("mock out the GetAdminTransactionsByFilter method")
//			},
//			GetTransactionByTransactionIDAndTypeFunc: func(ctx context.Context, transactionID string, tType entities.TransactionType) (*entities.Transaction, error) {
//				panic("mock out the GetTransactionByTransactionIDAndType method")
//			},
//			GetTransactionLogByIDFunc: func(ctx context.Context, id uint) (*entities.TransactionLog, error) {
//				panic("mock out the GetTransactionLogByID method")
//			},
//			GetTransactionsByFilterFunc: func(ctx context.Context, query entities.TransactionQuery) ([]entities.Transaction, error) {
//				panic("mock out the GetTransactionsByFilter method")
//			},
//			GetValidTransactionsForDebitorFunc: func(ctx context.Context, debitorID int64) ([]entities.Transaction, error) {
//				panic("mock out the GetValidTransactionsForDebitor method")
//			},
//			MigrateFunc: func() error {
//				panic("mock out the Migrate method")
//			},
//			QueryOutstandingDuesForDebitorFunc: func(ctx context.Context, debitorID int64) (int64, error) {
//				panic("mock out the QueryOutstandingDuesForDebitor method")
//			},
//			UpdateTransactionFunc: func(ctx context.Context, tr entities.Transaction, historize bool) error {
//				panic("mock out the UpdateTransaction method")
//			},
//		}
//
//		// use mockedRepository in code that requires database.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// CreateTransactionFunc mocks the CreateTransaction method.
	CreateTransactionFunc func(ctx context.Context, tr entities.Transaction) error

	// CreateTransactionLogFunc mocks the CreateTransactionLog method.
	CreateTransactionLogFunc func(ctx context.Context, h entities.TransactionLog) error

	// DeleteTransactionFunc mocks the DeleteTransaction method.
	DeleteTransactionFunc func(ctx context.Context, tr entities.Transaction) error

	// GetAdminTransactionsByFilterFunc mocks the GetAdminTransactionsByFilter method.
	GetAdminTransactionsByFilterFunc func(ctx context.Context, query entities.TransactionQuery) ([]entities.Transaction, error)

	// GetTransactionByTransactionIDAndTypeFunc mocks the GetTransactionByTransactionIDAndType method.
	GetTransactionByTransactionIDAndTypeFunc func(ctx context.Context, transactionID string, tType entities.TransactionType) (*entities.Transaction, error)

	// GetTransactionLogByIDFunc mocks the GetTransactionLogByID method.
	GetTransactionLogByIDFunc func(ctx context.Context, id uint) (*entities.TransactionLog, error)

	// GetTransactionsByFilterFunc mocks the GetTransactionsByFilter method.
	GetTransactionsByFilterFunc func(ctx context.Context, query entities.TransactionQuery) ([]entities.Transaction, error)

	// GetValidTransactionsForDebitorFunc mocks the GetValidTransactionsForDebitor method.
	GetValidTransactionsForDebitorFunc func(ctx context.Context, debitorID int64) ([]entities.Transaction, error)

	// MigrateFunc mocks the Migrate method.
	MigrateFunc func() error

	// QueryOutstandingDuesForDebitorFunc mocks the QueryOutstandingDuesForDebitor method.
	QueryOutstandingDuesForDebitorFunc func(ctx context.Context, debitorID int64) (int64, error)

	// UpdateTransactionFunc mocks the UpdateTransaction method.
	UpdateTransactionFunc func(ctx context.Context, tr entities.Transaction, historize bool) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateTransaction holds details about calls to the CreateTransaction method.
		CreateTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tr is the tr argument value.
			Tr entities.Transaction
		}
		// CreateTransactionLog holds details about calls to the CreateTransactionLog method.
		CreateTransactionLog []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// H is the h argument value.
			H entities.TransactionLog
		}
		// DeleteTransaction holds details about calls to the DeleteTransaction method.
		DeleteTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tr is the tr argument value.
			Tr entities.Transaction
		}
		// GetAdminTransactionsByFilter holds details about calls to the GetAdminTransactionsByFilter method.
		GetAdminTransactionsByFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query entities.TransactionQuery
		}
		// GetTransactionByTransactionIDAndType holds details about calls to the GetTransactionByTransactionIDAndType method.
		GetTransactionByTransactionIDAndType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TransactionID is the transactionID argument value.
			TransactionID string
			// TType is the tType argument value.
			TType entities.TransactionType
		}
		// GetTransactionLogByID holds details about calls to the GetTransactionLogByID method.
		GetTransactionLogByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// GetTransactionsByFilter holds details about calls to the GetTransactionsByFilter method.
		GetTransactionsByFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query entities.TransactionQuery
		}
		// GetValidTransactionsForDebitor holds details about calls to the GetValidTransactionsForDebitor method.
		GetValidTransactionsForDebitor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DebitorID is the debitorID argument value.
			DebitorID int64
		}
		// Migrate holds details about calls to the Migrate method.
		Migrate []struct {
		}
		// QueryOutstandingDuesForDebitor holds details about calls to the QueryOutstandingDuesForDebitor method.
		QueryOutstandingDuesForDebitor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DebitorID is the debitorID argument value.
			DebitorID int64
		}
		// UpdateTransaction holds details about calls to the UpdateTransaction method.
		UpdateTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tr is the tr argument value.
			Tr entities.Transaction
			// Historize is the historize argument value.
			Historize bool
		}
	}
	lockCreateTransaction                    sync.RWMutex
	lockCreateTransactionLog                 sync.RWMutex
	lockDeleteTransaction                    sync.RWMutex
	lockGetAdminTransactionsByFilter         sync.RWMutex
	lockGetTransactionByTransactionIDAndType sync.RWMutex
	lockGetTransactionLogByID                sync.RWMutex
	lockGetTransactionsByFilter              sync.RWMutex
	lockGetValidTransactionsForDebitor       sync.RWMutex
	lockMigrate                              sync.RWMutex
	lockQueryOutstandingDuesForDebitor       sync.RWMutex
	lockUpdateTransaction                    sync.RWMutex
}

// CreateTransaction calls CreateTransactionFunc.
func (mock *RepositoryMock) CreateTransaction(ctx context.Context, tr entities.Transaction) error {
	callInfo := struct {
		Ctx context.Context
		Tr  entities.Transaction
	}{
		Ctx: ctx,
		Tr:  tr,
	}
	mock.lockCreateTransaction.Lock()
	mock.calls.CreateTransaction = append(mock.calls.CreateTransaction, callInfo)
	mock.lockCreateTransaction.Unlock()
	if mock.CreateTransactionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateTransactionFunc(ctx, tr)
}

// CreateTransactionCalls gets all the calls that were made to CreateTransaction.
// Check the length with:
//
//	len(mockedRepository.CreateTransactionCalls())
func (mock *RepositoryMock) CreateTransactionCalls() []struct {
	Ctx context.Context
	Tr  entities.Transaction
} {
	var calls []struct {
		Ctx context.Context
		Tr  entities.Transaction
	}
	mock.lockCreateTransaction.RLock()
	calls = mock.calls.CreateTransaction
	mock.lockCreateTransaction.RUnlock()
	return calls
}

// CreateTransactionLog calls CreateTransactionLogFunc.
func (mock *RepositoryMock) CreateTransactionLog(ctx context.Context, h entities.TransactionLog) error {
	callInfo := struct {
		Ctx context.Context
		H   entities.TransactionLog
	}{
		Ctx: ctx,
		H:   h,
	}
	mock.lockCreateTransactionLog.Lock()
	mock.calls.CreateTransactionLog = append(mock.calls.CreateTransactionLog, callInfo)
	mock.lockCreateTransactionLog.Unlock()
	if mock.CreateTransactionLogFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateTransactionLogFunc(ctx, h)
}

// CreateTransactionLogCalls gets all the calls that were made to CreateTransactionLog.
// Check the length with:
//
//	len(mockedRepository.CreateTransactionLogCalls())
func (mock *RepositoryMock) CreateTransactionLogCalls() []struct {
	Ctx context.Context
	H   entities.TransactionLog
} {
	var calls []struct {
		Ctx context.Context
		H   entities.TransactionLog
	}
	mock.lockCreateTransactionLog.RLock()
	calls = mock.calls.CreateTransactionLog
	mock.lockCreateTransactionLog.RUnlock()
	return calls
}

// DeleteTransaction calls DeleteTransactionFunc.
func (mock *RepositoryMock) DeleteTransaction(ctx context.Context, tr entities.Transaction) error {
	callInfo := struct {
		Ctx context.Context
		Tr  entities.Transaction
	}{
		Ctx: ctx,
		Tr:  tr,
	}
	mock.lockDeleteTransaction.Lock()
	mock.calls.DeleteTransaction = append(mock.calls.DeleteTransaction, callInfo)
	mock.lockDeleteTransaction.Unlock()
	if mock.DeleteTransactionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteTransactionFunc(ctx, tr)
}

// DeleteTransactionCalls gets all the calls that were made to DeleteTransaction.
// Check the length with:
//
//	len(mockedRepository.DeleteTransactionCalls())
func (mock *RepositoryMock) DeleteTransactionCalls() []struct {
	Ctx context.Context
	Tr  entities.Transaction
} {
	var calls []struct {
		Ctx context.Context
		Tr  entities.Transaction
	}
	mock.lockDeleteTransaction.RLock()
	calls = mock.calls.DeleteTransaction
	mock.lockDeleteTransaction.RUnlock()
	return calls
}

// GetAdminTransactionsByFilter calls GetAdminTransactionsByFilterFunc.
func (mock *RepositoryMock) GetAdminTransactionsByFilter(ctx context.Context, query entities.TransactionQuery) ([]entities.Transaction, error) {
	callInfo := struct {
		Ctx   context.Context
		Query entities.TransactionQuery
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockGetAdminTransactionsByFilter.Lock()
	mock.calls.GetAdminTransactionsByFilter = append(mock.calls.GetAdminTransactionsByFilter, callInfo)
	mock.lockGetAdminTransactionsByFilter.Unlock()
	if mock.GetAdminTransactionsByFilterFunc == nil {
		var (
			transactionsOut []entities.Transaction
			errOut          error
		)
		return transactionsOut, errOut
	}
	return mock.GetAdminTransactionsByFilterFunc(ctx, query)
}

// GetAdminTransactionsByFilterCalls gets all the calls that were made to GetAdminTransactionsByFilter.
// Check the length with:
//
//	len(mockedRepository.GetAdminTransactionsByFilterCalls())
func (mock *RepositoryMock) GetAdminTransactionsByFilterCalls() []struct {
	Ctx   context.Context
	Query entities.TransactionQuery
} {
	var calls []struct {
		Ctx   context.Context
		Query entities.TransactionQuery
	}
	mock.lockGetAdminTransactionsByFilter.RLock()
	calls = mock.calls.GetAdminTransactionsByFilter
	mock.lockGetAdminTransactionsByFilter.RUnlock()
	return calls
}

// GetTransactionByTransactionIDAndType calls GetTransactionByTransactionIDAndTypeFunc.
func (mock *RepositoryMock) GetTransactionByTransactionIDAndType(ctx context.Context, transactionID string, tType entities.TransactionType) (*entities.Transaction, error) {
	callInfo := struct {
		Ctx           context.Context
		TransactionID string
		TType         entities.TransactionType
	}{
		Ctx:           ctx,
		TransactionID: transactionID,
		TType:         tType,
	}
	mock.lockGetTransactionByTransactionIDAndType.Lock()
	mock.calls.GetTransactionByTransactionIDAndType = append(mock.calls.GetTransactionByTransactionIDAndType, callInfo)
	mock.lockGetTransactionByTransactionIDAndType.Unlock()
	if mock.GetTransactionByTransactionIDAndTypeFunc == nil {
		var (
			transactionOut *entities.Transaction
			errOut         error
		)
		return transactionOut, errOut
	}
	return mock.GetTransactionByTransactionIDAndTypeFunc(ctx, transactionID, tType)
}

// GetTransactionByTransactionIDAndTypeCalls gets all the calls that were made to GetTransactionByTransactionIDAndType.
// Check the length with:
//
//	len(mockedRepository.GetTransactionByTransactionIDAndTypeCalls())
func (mock *RepositoryMock) GetTransactionByTransactionIDAndTypeCalls() []struct {
	Ctx           context.Context
	TransactionID string
	TType         entities.TransactionType
} {
	var calls []struct {
		Ctx           context.Context
		TransactionID string
		TType         entities.TransactionType
	}
	mock.lockGetTransactionByTransactionIDAndType.RLock()
	calls = mock.calls.GetTransactionByTransactionIDAndType
	mock.lockGetTransactionByTransactionIDAndType.RUnlock()
	return calls
}

// GetTransactionLogByID calls GetTransactionLogByIDFunc.
func (mock *RepositoryMock) GetTransactionLogByID(ctx context.Context, id uint) (*entities.TransactionLog, error) {
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTransactionLogByID.Lock()
	mock.calls.GetTransactionLogByID = append(mock.calls.GetTransactionLogByID, callInfo)
	mock.lockGetTransactionLogByID.Unlock()
	if mock.GetTransactionLogByIDFunc == nil {
		var (
			transactionLogOut *entities.TransactionLog
			errOut            error
		)
		return transactionLogOut, errOut
	}
	return mock.GetTransactionLogByIDFunc(ctx, id)
}

// GetTransactionLogByIDCalls gets all the calls that were made to GetTransactionLogByID.
// Check the length with:
//
//	len(mockedRepository.GetTransactionLogByIDCalls())
func (mock *RepositoryMock) GetTransactionLogByIDCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockGetTransactionLogByID.RLock()
	calls = mock.calls.GetTransactionLogByID
	mock.lockGetTransactionLogByID.RUnlock()
	return calls
}

// GetTransactionsByFilter calls GetTransactionsByFilterFunc.
func (mock *RepositoryMock) GetTransactionsByFilter(ctx context.Context, query entities.TransactionQuery) ([]entities.Transaction, error) {
	callInfo := struct {
		Ctx   context.Context
		Query entities.TransactionQuery
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockGetTransactionsByFilter.Lock()
	mock.calls.GetTransactionsByFilter = append(mock.calls.GetTransactionsByFilter, callInfo)
	mock.lockGetTransactionsByFilter.Unlock()
	if mock.GetTransactionsByFilterFunc == nil {
		var (
			transactionsOut []entities.Transaction
			errOut          error
		)
		return transactionsOut, errOut
	}
	return mock.GetTransactionsByFilterFunc(ctx, query)
}

// GetTransactionsByFilterCalls gets all the calls that were made to GetTransactionsByFilter.
// Check the length with:
//
//	len(mockedRepository.GetTransactionsByFilterCalls())
func (mock *RepositoryMock) GetTransactionsByFilterCalls() []struct {
	Ctx   context.Context
	Query entities.TransactionQuery
} {
	var calls []struct {
		Ctx   context.Context
		Query entities.TransactionQuery
	}
	mock.lockGetTransactionsByFilter.RLock()
	calls = mock.calls.GetTransactionsByFilter
	mock.lockGetTransactionsByFilter.RUnlock()
	return calls
}

// GetValidTransactionsForDebitor calls GetValidTransactionsForDebitorFunc.
func (mock *RepositoryMock) GetValidTransactionsForDebitor(ctx context.Context, debitorID int64) ([]entities.Transaction, error) {
	callInfo := struct {
		Ctx       context.Context
		DebitorID int64
	}{
		Ctx:       ctx,
		DebitorID: debitorID,
	}
	mock.lockGetValidTransactionsForDebitor.Lock()
	mock.calls.GetValidTransactionsForDebitor = append(mock.calls.GetValidTransactionsForDebitor, callInfo)
	mock.lockGetValidTransactionsForDebitor.Unlock()
	if mock.GetValidTransactionsForDebitorFunc == nil {
		var (
			transactionsOut []entities.Transaction
			errOut          error
		)
		return transactionsOut, errOut
	}
	return mock.GetValidTransactionsForDebitorFunc(ctx, debitorID)
}

// GetValidTransactionsForDebitorCalls gets all the calls that were made to GetValidTransactionsForDebitor.
// Check the length with:
//
//	len(mockedRepository.GetValidTransactionsForDebitorCalls())
func (mock *RepositoryMock) GetValidTransactionsForDebitorCalls() []struct {
	Ctx       context.Context
	DebitorID int64
} {
	var calls []struct {
		Ctx       context.Context
		DebitorID int64
	}
	mock.lockGetValidTransactionsForDebitor.RLock()
	calls = mock.calls.GetValidTransactionsForDebitor
	mock.lockGetValidTransactionsForDebitor.RUnlock()
	return calls
}

// Migrate calls MigrateFunc.
func (mock *RepositoryMock) Migrate() error {
	callInfo := struct {
	}{}
	mock.lockMigrate.Lock()
	mock.calls.Migrate = append(mock.calls.Migrate, callInfo)
	mock.lockMigrate.Unlock()
	if mock.MigrateFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.MigrateFunc()
}

// MigrateCalls gets all the calls that were made to Migrate.
// Check the length with:
//
//	len(mockedRepository.MigrateCalls())
func (mock *RepositoryMock) MigrateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMigrate.RLock()
	calls = mock.calls.Migrate
	mock.lockMigrate.RUnlock()
	return calls
}

// QueryOutstandingDuesForDebitor calls QueryOutstandingDuesForDebitorFunc.
func (mock *RepositoryMock) QueryOutstandingDuesForDebitor(ctx context.Context, debitorID int64) (int64, error) {
	callInfo := struct {
		Ctx       context.Context
		DebitorID int64
	}{
		Ctx:       ctx,
		DebitorID: debitorID,
	}
	mock.lockQueryOutstandingDuesForDebitor.Lock()
	mock.calls.QueryOutstandingDuesForDebitor = append(mock.calls.QueryOutstandingDuesForDebitor, callInfo)
	mock.lockQueryOutstandingDuesForDebitor.Unlock()
	if mock.QueryOutstandingDuesForDebitorFunc == nil {
		var (
			nOut   int64
			errOut error
		)
		return nOut, errOut
	}
	return mock.QueryOutstandingDuesForDebitorFunc(ctx, debitorID)
}

// QueryOutstandingDuesForDebitorCalls gets all the calls that were made to QueryOutstandingDuesForDebitor.
// Check the length with:
//
//	len(mockedRepository.QueryOutstandingDuesForDebitorCalls())
func (mock *RepositoryMock) QueryOutstandingDuesForDebitorCalls() []struct {
	Ctx       context.Context
	DebitorID int64
} {
	var calls []struct {
		Ctx       context.Context
		DebitorID int64
	}
	mock.lockQueryOutstandingDuesForDebitor.RLock()
	calls = mock.calls.QueryOutstandingDuesForDebitor
	mock.lockQueryOutstandingDuesForDebitor.RUnlock()
	return calls
}

// UpdateTransaction calls UpdateTransactionFunc.
func (mock *RepositoryMock) UpdateTransaction(ctx context.Context, tr entities.Transaction, historize bool) error {
	callInfo := struct {
		Ctx       context.Context
		Tr        entities.Transaction
		Historize bool
	}{
		Ctx:       ctx,
		Tr:        tr,
		Historize: historize,
	}
	mock.lockUpdateTransaction.Lock()
	mock.calls.UpdateTransaction = append(mock.calls.UpdateTransaction, callInfo)
	mock.lockUpdateTransaction.Unlock()
	if mock.UpdateTransactionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateTransactionFunc(ctx, tr, historize)
}

// UpdateTransactionCalls gets all the calls that were made to UpdateTransaction.
// Check the length with:
//
//	len(mockedRepository.UpdateTransactionCalls())
func (mock *RepositoryMock) UpdateTransactionCalls() []struct {
	Ctx       context.Context
	Tr        entities.Transaction
	Historize bool
} {
	var calls []struct {
		Ctx       context.Context
		Tr        entities.Transaction
		Historize bool
	}
	mock.lockUpdateTransaction.RLock()
	calls = mock.calls.UpdateTransaction
	mock.lockUpdateTransaction.RUnlock()
	return calls
}
